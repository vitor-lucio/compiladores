exp' -> exp
exp -> l-value
exp -> nil
exp -> ( expseq ) 
exp -> num 
exp -> string
exp -> - exp
exp -> id ( args )
exp -> exp + exp 
exp -> exp - exp 
exp -> exp * exp 
exp -> exp / exp
exp -> exp = exp 
exp -> exp <> exp
exp -> exp < exp 
exp -> exp > exp
exp -> exp <= exp
exp -> exp >= exp
exp -> exp & exp 
exp -> exp | exp
exp -> type-id { id = exp idexps }
exp -> type-id [ exp ] of exp
exp -> l-value := exp
exp -> if exp then exp else exp
exp -> if exp then exp
exp -> while exp do exp
exp -> for id := exp to exp do exp
exp -> break
exp -> let decs in expseq end
exp -> ''
decs -> dec decs
decs -> ''
dec -> tydec 
dec -> vardec 
dec -> fundec
tydec -> type id = ty
ty -> id 
ty -> { id : type-id tyfields1 }
ty -> array of id
tyfields -> id : type-id tyfields1
tyfields -> ''
tyfields1 -> , id : type-id tyfields1
tyfields1 -> ''
vardec -> var id := exp
vardec -> var id : type-id := exp
fundec -> function id ( tyfields ) = exp
fundec -> function id ( tyfields ) : type-id = exp
l-value -> id
l-value -> l-value . id
l-value -> l-value [ exp ]
type-id -> id
expseq -> exp expseq1
expseq -> ''
expseq1 -> ; exp expseq1
expseq1 -> ''
args -> exp args1
args -> ''
args1 -> , exp args1
args1 -> ''
idexps -> , id = exp idexps
idexps -> ''
